"""
This type stub file was generated by pyright.
"""

def check_int(s): # -> bool:
    ...

def neg_range(r: range): # -> range:
    ...

def abs_range(r: range): # -> range:
    ...

def add_range(r1: range, r2: range): # -> range:
    ...

def possible_range(s: set[int], control_int=...): # -> range | list[int]:
    ...

class Stopwatch:
    def __init__(self) -> None:
        ...
    
    def elapsed_time(self, *, reset=...): # -> str:
        ...
    


class _Star(float):
    def __init__(self, val) -> None:
        ...
    
    def __repr__(self): # -> Literal['*']:
        ...
    
    def __str__(self) -> str:
        ...
    


ANY = ...
ALL = ...
def combinations(n, size): # -> combinations[Any]:
    ...

def different_values(*args): # -> bool:
    """
    Returns True if
     all specified integers are different
    :return: True if all specified integers are different
    """
    ...

def flatten(*args, keep_none=..., keep_tuples=...):
    """
    Returns a list with all elements that can be encountered when looking into the specified arguments.
    Typically, this is a list (of possibly any dimension).

    :param keep_none: if True, None values are not discarded
    """
    ...

def is_containing(t, types, *, check_first_only=...): # -> bool | None:
    ...

def unique_type_in(t, tpe=...): # -> type[Any] | Literal[False] | None:
    ...

def is_1d_tuple(t, types): # -> bool:
    ...

def is_1d_list(t, types=...): # -> bool:
    ...

def is_2d_list(m, types=...): # -> bool:
    ...

def is_matrix(m, types=...): # -> bool:
    ...

def is_square_matrix(m, types=...): # -> bool:
    ...

def is_3d_list(c, types=...): # -> bool:
    ...

def is_cube(c, types=...): # -> bool:
    ...

def alphabet_positions(s): # -> tuple[int, ...]:
    """
    Returns a tuple with the indexes of the letters (with respect to the 26 letters of the Latin alphabet) of the specified string.

    @param s: a string
    """
    ...

def all_primes(limit): # -> list[int]:
    """
    Returns a list with all prime numbers that are strictly less than the specified limit.

    :param limit: an integer
    """
    ...

def value_in_base(decimal_value, length, base):
    ...

def integer_scaling(values): # -> list[int]:
    """
    Returns a list with all specified values after possibly converting them (when decimal) into integers by means of automatic scaling
    """
    ...

def decrement(t): # -> int | list[Any]:
    ...

def matrix_to_string(m): # -> str:
    ...

def table_to_string(table, restricting_domains=..., *, parallel=...): # -> LiteralString | str:
    ...

def integers_to_string(numbers): # -> str:
    ...

def display_constraints(ctr_entities, separator=...): # -> None:
    ...

def structured_list(m, level=...): # -> str:
    ...

def is_windows(): # -> bool:
    ...

def string_color(s, start, final=...):
    ...

class Error:
    errorOccurrence = ...


def warning(message): # -> None:
    ...

def warning_if(test, message): # -> None:
    ...

def error(message):
    ...

def error_if(test, message): # -> None:
    ...

polyominoes = ...
