"""
This type stub file was generated by pyright.
"""

None_Values = ...
class Compilation:
    string_model = ...
    string_data = ...
    model = ...
    data = ...
    solve = ...
    stopwatch = ...
    stopwatch2 = ...
    done = ...
    pathname = ...
    filename = ...
    @staticmethod
    def load(console=...): # -> None:
        ...
    
    @staticmethod
    def set_path_file_name(name): # -> None:
        ...
    
    @staticmethod
    def compile(filename=..., disabling_opoverrider=..., verbose=...):
        ...
    


def load_json_data(filename, *, storing=...): # -> pycsp3.tools.curser.namedtuple | list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | pycsp3.tools.curser.namedtuple | Any] | pycsp3.tools.curser.namedtuple | Any] | pycsp3.tools.curser.namedtuple | Any] | Any | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | pycsp3.tools.curser.namedtuple | Any] | pycsp3.tools.curser.namedtuple | Any] | pycsp3.tools.curser.namedtuple | Any] | pycsp3.tools.curser.namedtuple | Any] | None:
    """
    Loads and returns the data from the specified JSON file (possibly given by a URL)

    :param filename: name (possibly ULR) of a JSON file
    :return: the loaded data
    """
    ...

def default_data(filename): # -> Any | pycsp3.tools.curser.namedtuple | list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | list[list[Any] | ListInt | ListVar | list[pycsp3.tools.curser.namedtuple] | pycsp3.tools.curser.namedtuple | Any] | None:
    """
    Loads data from the specified JSON file (possibly given by a URL)

    :param filename: mane (possibly ULR) of a JSON file
    :return: the loaded data
    """
    ...

def usage(message): # -> None:
    ...

