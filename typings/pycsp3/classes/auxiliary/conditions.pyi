"""
This type stub file was generated by pyright.
"""

from functools import total_ordering

@total_ordering
class Condition:
    def __init__(self, operator) -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    @staticmethod
    def build_condition(condition): # -> ConditionValue | ConditionVariable | ConditionInterval | ConditionParameter | ConditionSet | None:
        ...
    
    def filtering(self, values): # -> None:
        ...
    
    def str_tuple(self): # -> None:
        ...
    
    def right_operand(self): # -> None:
        ...
    
    def infix_string(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ConditionValue(Condition):
    def __init__(self, operator, value) -> None:
        ...
    
    def filtering(self, values): # -> tuple[Any] | tuple[()] | Generator[Any, None, None]:
        ...
    
    def str_tuple(self): # -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def right_operand(self): # -> Any:
        ...
    


class ConditionVariable(Condition):
    def __init__(self, operator, variable) -> None:
        ...
    
    def filtering(self, values):
        ...
    
    def str_tuple(self):
        ...
    
    def right_operand(self): # -> Any:
        ...
    


class ConditionInterval(Condition):
    def __init__(self, operator, int_min, int_max) -> None:
        ...
    
    def filtering(self, values): # -> Generator[Any, None, None]:
        ...
    
    def str_tuple(self): # -> str:
        ...
    
    def right_operand(self): # -> str:
        ...
    


class ConditionSet(Condition):
    def __init__(self, operator, t) -> None:
        ...
    
    def filtering(self, values): # -> Generator[Any, None, None]:
        ...
    
    def str_tuple(self): # -> str:
        ...
    
    def right_operand(self): # -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ConditionParameter(Condition):
    def __init__(self, operator, parameter) -> None:
        ...
    
    def concretize_with(self, limit): # -> ConditionValue | ConditionVariable | ConditionInterval | ConditionParameter | ConditionSet | None:
        ...
    
    def filtering(self, values):
        ...
    
    def str_tuple(self):
        ...
    
    def right_operand(self): # -> Any:
        ...
    


class ConditionNode(Condition):
    def __init__(self, operator, node) -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def filtering(self, values): # -> set[Self]:
        ...
    
    def str_tuple(self):
        ...
    
    def right_operand(self): # -> Any:
        ...
    
    def evaluate(self, t, domains): # -> tuple[list[Any], list[tuple[Any, Any]]] | tuple[list[Any], list[tuple[Any, Any, Any]]]:
        ...
    


def lt(v): # -> ConditionValue | ConditionVariable | ConditionNode:
    """
    Builds an object Condition whose operator is lt (strictly less than)
    and the (right operand) is the specified argument

    :param v: either an integer or the root node of an expression
    :return: an object Condition
    """
    ...

def le(v): # -> ConditionValue | ConditionVariable | ConditionNode:
    """
    Builds an object Condition whose operator is le (less than or equal)
    and the (right operand) is the specified argument

    :param v: either an integer or the root node of an expression
    :return: an object Condition
    """
    ...

def ge(v): # -> ConditionValue | ConditionVariable | ConditionNode:
    """
    Builds an object Condition whose operator is ge (greater than or equal)
    and the (right operand) is the specified argument

    :param v: either an integer or the root node of an expression
    :return: an object Condition
    """
    ...

def gt(v): # -> ConditionValue | ConditionVariable | ConditionNode:
    """
    Builds an object Condition whose operator is gt (strictly greater than)
    and the (right operand) is the specified argument

    :param v: either an integer or the root node of an expression
    :return: an object Condition
    """
    ...

def eq(v): # -> ConditionValue | ConditionVariable | ConditionNode:
    """
    Builds an object Condition whose operator is eq (equal to)
    and the (right operand) is the specified argument

    :param v: either an integer or the root node of an expression
    :return: an object Condition
    """
    ...

def ne(v): # -> ConditionValue | ConditionVariable | ConditionNode:
    """
    Builds an object Condition whose operator is 'ne' (not equal to)
    and the (right operand) is the specified argument

    :param v: either an integer or the root node of an expression
    :return: an object Condition
    """
    ...

def inside(*v): # -> ConditionInterval | ConditionSet:
    """
    Builds an object Condition whose operator is 'in'
    and the (right operand) is defined from the specified argument(s)

    :param v: a range, a set, a tuple or a list of integers
    :return: an object Condition
    """
    ...

def complement(*v): # -> ConditionInterval | ConditionSet:
    """
     Builds an object Condition whose operator is 'not in'
    and the (right operand) is defined from the specified argument(s)

    :param v: a range, a set, a tuple or a list of integers
    :return: an object Condition
    """
    ...

