"""
This type stub file was generated by pyright.
"""

class Diagram:
    _cnt = ...
    _cache = ...
    def __init__(self, transitions) -> None:
        ...
    
    def __contains__(self, other): # -> Literal[True]:
        ...
    
    def __str__(self) -> str:
        ...
    
    MSG_STATE = ...
    def flat_transitions(self, scp): # -> list[Any]:
        ...
    
    def transitions_to_string(self, scp): # -> LiteralString:
        ...
    


class Automaton(Diagram):
    @staticmethod
    def q(i, j=..., k=...): # -> str:
        """
        Returns the name of a state from the specified argument(s)

        :param i: the index of the state
        :param j: a secondary index
        :param k: a third index
        :return: the name of a state from the specified argument(s)
        """
        ...
    
    @staticmethod
    def states_for(*values): # -> list[str]:
        """
        Returns a list with the names of states corresponding to the specified values

        :param values: a list of integers (or strings)
        :return: a list of names of states, one for each specified value
        """
        ...
    
    def __init__(self, *, start, transitions, final) -> None:
        """
        Builds an automaton from the specified arguments: a starting state, a set of transitions and a set of final states

        :param start: the starting state
        :param transitions: a set of transitions
        :param final: the final state(s)
        """
        ...
    
    def deterministic_copy(self, scp): # -> Automaton:
        ...
    
    def __str__(self) -> str:
        ...
    


class MDD(Diagram):
    def __init__(self, transitions) -> None:
        """
        Builds an MDD from the specified set of transitions

        :param transitions: a set of transitions
        """
        ...
    
    def __str__(self) -> str:
        ...
    


