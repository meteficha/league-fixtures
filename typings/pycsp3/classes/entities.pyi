"""
This type stub file was generated by pyright.
"""

class Entity:
    def __init__(self, name, comment=..., tags=...) -> None:
        ...
    
    def note(self, comment): # -> Self:
        ...
    
    def tag(self, tags): # -> Self:
        ...
    
    def same_type_and_basic_attributes(self, other): # -> Literal[False]:
        ...
    
    def mergeable_with(self, other): # -> bool:
        ...
    
    def blank_basic_attributes(self): # -> bool:
        ...
    
    def clear_basic_attributes(self): # -> None:
        ...
    
    def copy_basic_attributes_of(self, other): # -> Self:
        ...
    


class EVar(Entity):
    def __init__(self, x, comment=..., tags=...) -> None:
        ...
    
    def get_type(self):
        ...
    
    def __call__(self): # -> Any:
        ...
    


class EVarArray(Entity):
    def __init__(self, X, name, comment=..., tags=...) -> None:
        ...
    
    def is_containing_hole(self): # -> bool | None:
        ...
    
    def extend_with(self, var): # -> None:
        ...
    
    def get_type(self):
        ...
    
    def __getitem__(self, i):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __next__(self):
        ...
    
    def size_to_string(self): # -> str:
        ...
    


class ECtr(Entity):
    def __init__(self, c) -> None:
        ...
    
    def __bool__(self): # -> Literal[True]:
        ...
    
    def to_table(self): # -> list[bool] | Self:
        ...
    


class ECtrs(Entity):
    """ Class for representing sets of constraints """
    def __init__(self, constraints=...) -> None:
        ...
    
    def flat_constraints(self): # -> list[Any]:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class EToGather(ECtrs):
    def __init__(self, constraints) -> None:
        ...
    


class EToSatisfy(ECtrs):
    def __init__(self, constraints) -> None:
        ...
    
    def delete(self, i=...): # -> None:
        ...
    


class EGroup(ECtrs):
    def __init__(self) -> None:
        ...
    


class EBlock(ECtrs):
    def __init__(self, constraints) -> None:
        ...
    


class ESlide(ECtrs):
    def __init__(self, constraints) -> None:
        ...
    


class EMetaCtr(Entity):
    def __init__(self, name, constraints, min_arity, max_arity=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class EAnd(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class EOr(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class ENot(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class EXor(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class EIfThen(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class EIfThenElse(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class EIff(EMetaCtr):
    def __init__(self, constraints) -> None:
        ...
    


class EObjective(Entity):
    def __init__(self, c) -> None:
        ...
    


class EAnnotation(Entity):
    def __init__(self, a) -> None:
        ...
    


class VarEntities:
    items = ...
    varToEVar = ...
    varToEVarArray = ...
    prefixToEVarArray = ...
    @staticmethod
    def get_item_with_name(s): # -> EVar | None:
        ...
    


class CtrEntities:
    items = ...


class ObjEntities:
    items = ...


class AnnEntities:
    items = ...
    items_types = ...


def clear(): # -> None:
    """
    Removes everything that was declared (variables) or posted (constraints, objective)
    """
    ...

