"""
This type stub file was generated by pyright.
"""

from enum import unique
from pycsp3.classes.auxiliary.enums import AbstractType
from pycsp3.classes.main.constraints import ConstraintUnmergeable

@unique
class TypeVarHeuristic(AbstractType):
    ...


@unique
class TypeValHeuristic(AbstractType):
    ...


@unique
class TypeConsistency(AbstractType):
    def __str__(self) -> str:
        ...
    


@unique
class TypeBranching(AbstractType):
    def __str__(self) -> str:
        ...
    


@unique
class TypeRestart(AbstractType):
    ...


@unique
class TypeAnnArg(AbstractType):
    TYPE = ...
    LC = ...
    ORDER = ...


class Annotation(ConstraintUnmergeable):
    ...


class AnnotationDecision(Annotation):
    def __init__(self, variables) -> None:
        ...
    


class AnnotationOutput(Annotation):
    def __init__(self, variables) -> None:
        ...
    


class AnnotationHeuristic(Annotation):
    def __init__(self, name) -> None:
        ...
    
    def add_arguments(self, random_part, min_part, max_part): # -> None:
        ...
    


class AnnotationVarHeuristic(AnnotationHeuristic):
    def __init__(self, h) -> None:
        ...
    


class AnnotationValHeuristic(AnnotationHeuristic):
    def __init__(self, h) -> None:
        ...
    


class AnnotationFiltering(Annotation):
    def __init__(self, consistency) -> None:
        ...
    


class AnnotationPrepro(Annotation):
    def __init__(self, consistency) -> None:
        ...
    


class AnnotationSearch(Annotation):
    def __init__(self, search) -> None:
        ...
    


class AnnotationRestarts(Annotation):
    def __init__(self, restarts) -> None:
        ...
    


class Search:
    def __init__(self, *, consistency=..., branching=...) -> None:
        ...
    


class Restarts:
    def __init__(self, *, r_type, cutoff, factor=...) -> None:
        ...
    


class VHeuristic:
    def __init__(self) -> None:
        ...
    
    def random(self, variables=...): # -> Self:
        ...
    
    def min(self, variables=..., *, h_type): # -> Self:
        ...
    
    def max(self, variables=..., *, h_type): # -> Self:
        ...
    


class VarHeuristic(VHeuristic):
    def __init__(self, *, lc=...) -> None:
        ...
    
    def static(self, variables): # -> Self:
        ...
    


class ValHeuristic(VHeuristic):
    def __init__(self) -> None:
        ...
    
    def static(self, variables, *, order): # -> Self:
        ...
    


