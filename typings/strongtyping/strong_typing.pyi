"""
This type stub file was generated by pyright.
"""

from typing import Type

CACHE_IGNORE_CLASS_FUNCTIONS = ...
def match_typing(_func=..., *, excep_raise: Type[Exception] = ..., subclass: bool = ..., severity=..., **kwargs): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any] | Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    ...

def add_required_methods_to_class(cls, inst): # -> None:
    ...

class MatchTypedDict:
    def __new__(cls, instance=..., *args, **kwargs): # -> Self:
        ...
    
    def __init__(self, cls=..., *args, **kwargs) -> None:
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    
    @property
    def is_typed_dict(self): # -> bool | None:
        ...
    
    def __match_class_repr__(self): # -> str:
        ...
    
    def create_error_msg(self, args: dict): # -> str:
        ...
    
    def check_annotations(self): # -> bool:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


def match_class_typing(cls=..., **kwargs): # -> MatchTypedDict | Callable[..., Callable[..., Any]]:
    ...

def getter(func): # -> property:
    ...

def setter(func): # -> property:
    ...

def getter_setter(func): # -> property:
    ...

class FinalClass:
    def __new__(cls, instance=..., *args, **kwargs): # -> Self:
        ...
    
    def __init__(self, cls=..., *args, **kwargs) -> None:
        ...
    
    def __getattr__(self, item): # -> Any:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    @property
    def __doc__(self): # -> str | None:
        ...
    


